const R =require('ramda')

/**
 * A convenient function for handle error in callback function.
 * Accept two function res(resolve) and rej(reject) ,
 * return a wrap function that accept a list arguments,
 * the first argument as error, if error is null,
 * the res function will call,else the rej function.
 * @function
 * @param {function} res the function which will call when no error throw
 * @param {function} rej the function which will call when  error occur
 * @return {function} return a function that accept a list arguments,
 * the first argument as error, if error is null, the res function
 * will call,else the rej function
 **/
const checkErr = R.curry(
	(res, rej) => (err, ...data) => R.ifElse(
		R.propEq('err', null),
		R.compose(
			res,
			R.prop('data')
		),
		R.compose(
			rej,
			R.prop('err')
		)
	)({err, data})
)

module.exports=checkErr