const R =require('ramda')

/**
 * the middleware must accept a object as 'context' and return a object to merge to context
 * @function
 * @param {array} mids a array of middleware,
 * @return {function} A function that accept a object as initial 'context' pass to first middleware
 * @example
 * // A function use midFlow for create a element(browser) by option
 * const elm = j.midFlow(
 *     [
 *        ({tag}) => ({el: document.createElement(tag)}),
 *        ({el, attr = {}}) => {
 *             R.forEachObjIndexed(
 *                  (value, name) => el[name] = value,
 *                  attr
 *              )
 *           },
 *         ({children = [], el}) => {
 *             j.midFlow(
 *                  [
 *                      ({doc}) => {
 *                          R.forEach(
 *                              (child) => doc.appendChild(child),
 *                              children
 *                          )
 *                        },
 *                       ({doc}) => {el.appendChild(doc)}
 *                   ]
 *             )({doc: new DocumentFragment})
 *          },
 *         ({evtLir = [], el}) => {
 *               R.forEach(
 *                  ({handler, type, opt = {}}) => el.addEventListener(type, handler, opt),
 *                   evtLir
 *                )
 *          },
 *        ({el}) => el
 *    ]
 *)
 */
const midFlow = (mids) => R.compose(
	R.apply(R.pipe),
	R.append(R.last(mids)),
	() => R.map(
		(mid) => (ctx) => R.merge(
			ctx,
			R.defaultTo(
				{},
				mid(ctx)
			)
		),
		R.init(mids)
	)
)(mids)

module.exports= midFlow

