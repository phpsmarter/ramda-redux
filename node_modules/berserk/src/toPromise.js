const checkErr =require('./checkErr')
const R =require('ramda')


/**
 * Wrap the callback style function to Promise style function,
 * the callback style function must restrict by convention:
 * 1. the function must put the callback function where the last of arguments,
 * such as (arg1,arg2,arg3,arg...,callback)
 * 2. the callback function must call as callback(err,arg1ï¼Œarg2,arg...)
 * @function
 * @param {function} fun The callback style function to transform
 * @return {function} Return the new function that will return a Promise,
 * while the origin function throw a error, the Promise will be Promise.reject(error),
 * while the origin function work fine, the Promise will be Promise.resolve(args: array),
 * the args is which callback function accept
 * @example
 *
 *    const {readdir} =require('fs')
 *    const readdirP=toPromise(readdir)
 *    readdir(Path)
 *      .then(
 *        files=>console.log(files),
 *        (err)=>console.log(err)
 *        )
 *
 * */
const toPromise = (fun) => (...args) => new Promise(
	(res, rej) => R.apply(
		fun,
		R.append(
			checkErr(res, rej),
			args
		)
	)
)

module.exports = toPromise
